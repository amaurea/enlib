#!/usr/bin/env python
import numpy as np, argparse, healpy, sharp
from lambda_tools import enmap, curvedsky, utils, coordinates
parser = argparse.ArgumentParser()
parser.add_argument("input_map", help="The input fits file to reproject. Can be a FITS image or a Healpix file.")
parser.add_argument("template",  help="A fits file with the same shape and world coordinate system as the output.")
parser.add_argument("output_map",help="The file to write the output to.")
parser.add_argument("-i", "--first", type=int,   default=None, help="The first field to use. Set to value greater than 0 to skip the first fields.")
parser.add_argument("-n", "--ncomp", type=int,   default=None, help="The number of fields to use. By default all are read for normal maps, and 3 are read for healpix maps. If 3 fields are read, they are assumed to be the T,Q,U stokes parameters.")
parser.add_argument("-l", "--lmax",  type=int,   default=None, help="Maximum l to use. Defaults to 3*nside.")
parser.add_argument("-H", "--hdu",   type=int,   default=None, help="The HDU to read the map from. 0 by default.")
parser.add_argument("-r", "--rot",   type=str,   default=None, help="Coordinate transformation to perform while interpolation. By default no rotation is performed. Takes the form isys,osys, where either can be cel, gal or ecl for celestial (equatorial), galactic or ecliptic coordinates respectively. For example -r gal,cel would transform from an input map in galactic coordinates to an output map in equatorial coordinates.")
parser.add_argument("-O", "--order", type=int,   default=3, help="Interpolation order. Defaults to bicubic spline interpolation (3)."),
parser.add_argument("-v",      action="count",   default=1, help="Increase verbosity.")
parser.add_argument("-q",      action="count",   default=0, help="Decrease verbosity.")
parser.add_argument("-u", "--unit",  type=float, default=1, help="Unit of input map in units of the output map unit. For example, if your input map is in K but your output should be in uK, pass 1e6.")
parser.add_argument("--nopol", action="store_true", help="Do not perform any polarization rotation.")
args = parser.parse_args()

printer = utils.Printer(args.v - args.q)

def remove_bad(arr, extra_vals=[healpy.UNSEEN], fill=0):
	arr  = np.asanyarray(arr).copy()
	mask = ~np.isfinite(arr)
	for val in extra_vals:
		mask |= np.isclose(arr, val)
	arr[mask] = 0
	return arr

# We separate out this part first, so we know the exception
# came from the read and not somewhere else.
try:
	# Assume it's not a healpix map first
	with printer.time("read %s" % args.input_map, 1):
		imap  = enmap.read_map(args.input_map, hdu=args.hdu)
		heal  = False
except ValueError:
	# Try reading as healpix map
	first = args.first or 0
	ncomp = args.ncomp or 3
	fields= tuple(range(first,first+ncomp))
	with printer.time("read healpix %s" % args.input_map, 1):
		imap   = np.atleast_2d(healpy.read_map(args.input_map, field=fields, hdu=args.hdu or 1))
	heal   = True

with printer.time("remove bad values", 1):
	imap = remove_bad(imap)

imap *= args.unit

# Ok, now we know which type we have.
if not heal:
	# It's convenient to have a stokes axis, even if we don't
	# end up using it.
	orig_ndim  = imap.ndim
	if imap.ndim == 2: imap = imap[None]
	if args.first: imap = imap[...,args.first:,:,:]
	if args.ncomp: imap = imap[...,:args.ncomp,:,:]
	pol   = imap.shape[-3] == 3 and not args.nopol
	with printer.time("read %s" % args.template, 1):
		template = enmap.read_map(args.template)
	if args.rot:
		s1,s2 = args.rot.split(",")
		with printer.time("compute target positions", 1):
			pmap  = template.posmap()
		with printer.time("compute input  positions", 1):
			opos  = coordinates.transform(s2, s1, pmap[::-1], pol=pol)
			pmap[...] = opos[1::-1]
		with printer.time("interpolate", 1):
			omap  = enmap.samewcs(imap.at(pmap, order=args.order, mask_nan=False), template)
		if args.rot and pol:
			with printer.time("rotate polarization", 1):
				omap[1:3] = enmap.rotate_pol(omap[1:3], -opos[2])
	else:
		with printer.time("interpolate", 1):
			omap  = imap.project(template.shape, template.wcs, order=args.order, mask_nan=False)
	# Remove any pre-axes we added if necessary
	if orig_ndim == 2: omap = omap[0]
	with printer.time("write %s" % args.output_map, 1):
		enmap.write_map(args.output_map, omap)
else:
	# We will project using a spherical-harmonics transform because
	# interpolating on the healpix grid is hard. This is slow and
	# memory-intensive, but has the advantage that downgrading does
	# not lose more information than necessary.
	with printer.time("prepare SHT", 1):
		pol   = ncomp == 3 and not args.nopol
		nside = healpy.npix2nside(imap.shape[1])
		lmax  = args.lmax or 3*nside
		minfo = sharp.map_info_healpix(nside)
		ainfo = sharp.alm_info(lmax)
		sht   = sharp.sht(minfo, ainfo)
		alm   = np.zeros((ncomp,ainfo.nelem), dtype=np.complex)
	with printer.time("map2alm", 1):
		# Perform the actual transform
		sht.map2alm(imap[0], alm[0])
		if ncomp == 3:
			sht.map2alm(imap[1:3],alm[1:3], spin=2)
		del imap
	with printer.time("read %s" % args.template, 1):
		# Get our template
		template = enmap.read_map(args.template)
	with printer.time("compute target positions", 1):
		# Compute position of our output pixels in the input map
		pmap = template.posmap()
	if args.rot:
		s1,s2 = args.rot.split(",")
		with printer.time("compute input  positions", 1):
			opos = coordinates.transform(s2, s1, pmap[::-1], pol=pol)
			pmap[...] = opos[1::-1]
			if len(opos) == 3: psi = -opos[2].copy()
			del opos
	with printer.time("interpolate with alm2map", 1):
		# Project down on the specified positions
		omap = curvedsky.alm2map_pos(alm, pmap)
	# Apply polarization rotation if necessary
	if args.rot and pol:
		with printer.time("rotate polarization", 1):
			omap[1:3] = enmap.rotate_pol(omap[1:3], psi)
	with printer.time("write %s" % args.output_map, 1):
		enmap.write_map(args.output_map, omap)
